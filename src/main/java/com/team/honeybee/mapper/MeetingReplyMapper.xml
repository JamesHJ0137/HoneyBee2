<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.honeybee.mapper.MeetingReplyMapper">
	
	<!-- 회원 댓글 작성 -->
	<insert id="insertMeetingReply" useGeneratedKeys="true" keyColumn="meetingReplyId" keyProperty="meetingReplyId">
		INSERT INTO MeetingReply (  member_id
							      , meeting_id
							      , content
							      , step
							      , refOrder
							      , delete_info<!-- 삭제 유무 설정 -->
				 			      )
		        VALUES ( 
		                  #{memberId}
		                , #{meetingId}
		                , #{content}
					    , 0
					    , 0
					    , 'N' <!-- 삭제가 안된 상태 1 -->
		               )
	</insert>
	
	
	<!-- 회원 자식댓글 작성 -->
	<insert id="insertMeetingReplyChild">
		INSERT INTO MeetingReply (  member_id  <!-- 회원id -->
							      , meeting_id <!-- 보드 id -->
							      , content 
							      , refNum <!-- 그룹 num -->
							      , step   <!-- 들여쓰기 -->
							      , refOrder <!-- 그룹내에서의 순서-->
							      , delete_info<!-- 삭제 유무 설정 -->
				 			      )
		        SELECT 
		                  #{memberId}
		                , #{meetingId}		 
		                , #{content}
		                , #{meetingReplyId}
					    , ( SELECT MAX_STEP
					          FROM ( 
					                 SELECT NVL(MAX(step), 0)+1 AS MAX_STEP 
					                   FROM MeetingReply 
									  WHERE meeting_reply_id = #{meetingReplyId}
								   ) AA
						   ) 
						, IFNULL( (SELECT MAX_STEP
						             FROM (SELECT NVL(MAX(refOrder)+1, 1) AS MAX_STEP
						                     FROM MeetingReply 
						                    WHERE meeting_id = #{meetingId}
						                      AND refNum = #{meetingReplyId}
						                    GROUP BY refNum
						                   ) TEMP
						           ), 1)
						, 'N' <!-- 삭제가 안된 상태 1 -->					                 
		         FROM DUAL
	</insert>
	
	<!-- 조상 댓글 목록 출력 -->
	<select id="selectAllMeetingId" resultType="com.team.honeybee.domain.MeetingReplyDto">
		SELECT r.meeting_reply_id meetingReplyId,
			   r.meeting_id meetingId,
			   r.member_id memberId,
			   r.content,
			   r.inserted,
			   r.delete_info deleteInfo,
			   m.nickname
		FROM MeetingReply r JOIN Member m ON r.member_id = m.member_id
		WHERE r.meeting_id = #{meetingId}
	</select>
	
	<!--  자식 댓글 목록 출력 -->
	<select id="selectAllChildrenByParentReplyId" resultType="com.team.honeybee.domain.MeetingReplyDto">
		SELECT r.meeting_reply_id meetingReplyId,
			   r.meeting_id meetingId,
			   r.member_id memberId,
			   r.content,
			   r.inserted,
			   r.delete_info deleteInfo,
			   m.nickname
		FROM MeetingReply r JOIN Member m ON r.member_id = m.member_id
		 WHERE refNum = (select refNum
						   from MeetingReply
					      where meeting_reply_id = r.meeting_reply_id
				   	        and step > 0
						)	
		ORDER BY meeting_reply_id
	
	</select>
	
	<select id="selectParentsByMeetingId" resultType="com.team.honeybee.domain.MeetingReplyDto">
		SELECT r.meeting_reply_id meetingReplyId,
			   r.meeting_id meetingId,
			   r.member_id memberId,
			   r.content,
			   r.inserted,
			   r.step,
			   r.delete_info deleteInfo,
			   m.nickname
		FROM MeetingReply r JOIN Member m ON r.member_id = m.member_id
		WHERE r.meeting_id = #{meetingId} 
		  AND r.step = 0 -- 최상위 부모
		ORDER BY meetingReplyId DESC
	</select>

	<select id="selectChildByParentId" resultType="com.team.honeybee.domain.MeetingReplyDto">
		SELECT r.meeting_reply_id meetingReplyId,
			   r.meeting_id meetingId,
			   r.member_id memberId,
			   r.content,
			   r.inserted,
			   r.step,
			   r.delete_info deleteInfo,
			   m.nickname
		FROM MeetingReply r JOIN Member m ON r.member_id = m.member_id
		WHERE r.refNum = #{parentId} 
		ORDER BY meetingReplyId DESC
	</select>

	<!-- 댓글 수정 -->
	<update id="updateMeetingReply">
		UPDATE MeetingReply 
		   SET content = #{content}
		 WHERE meeting_id = #{meetingId}
		   AND meeting_reply_id = #{meetingReplyId}
	</update>
	
	<!-- 댓글 삭제(화면에만 삭제처리, DB에는 남아있음) -->
	<update id="deleteMeetingReply">
		UPDATE MeetingReply 
		   SET delete_info = 'Y'
		 WHERE meeting_reply_id = #{meetingReplyId}
	</update>
	
	<!-- 댓글 삭제(DB삭제 쿼리) 
	<update id="deleteMeetingReply">
		DELETE FROM MeetingReply
		 WHERE meeting_reply_id = #{meetingReplyId}
	</update>
	-->
	

</mapper>